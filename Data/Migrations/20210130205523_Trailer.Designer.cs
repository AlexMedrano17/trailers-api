// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using trailers_api.Models;

namespace trailers_api.Data.Migrations
{
    [DbContext(typeof(trailersContext))]
    [Migration("20210130205523_Trailer")]
    partial class Trailer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("trailers_api.Models.AdminUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INT")
                        .HasColumnName("ID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("password");

                    b.Property<byte[]>("SheduleDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("shedule_date")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR (50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admin_user");
                });

            modelBuilder.Entity("trailers_api.Models.Genre", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INT")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR (50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("trailers_api.Models.Trailer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<long>("Genre")
                        .HasColumnType("INT")
                        .HasColumnName("genre");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("img_url");

                    b.Property<byte[]>("SheduleDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("shedule_date")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR (100)")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasColumnName("url");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("CHAR (4)")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("Genre");

                    b.HasIndex("ImgUrl")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("trailers_api.Models.Trailer", b =>
                {
                    b.HasOne("trailers_api.Models.Genre", "GenreNavigation")
                        .WithMany("Trailers")
                        .HasForeignKey("Genre")
                        .IsRequired();

                    b.Navigation("GenreNavigation");
                });

            modelBuilder.Entity("trailers_api.Models.Genre", b =>
                {
                    b.Navigation("Trailers");
                });
#pragma warning restore 612, 618
        }
    }
}
